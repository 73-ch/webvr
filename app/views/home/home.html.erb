<script id="vs" type="x-shader/x-vertex">
  attribute vec3 position;
  attribute vec4 color;
  uniform mat4 mvpMatrix;
  varying vec4 vColor;
  void main(){
    gl_Position = mvpMatrix * vec4(position, 1.0);
    vColor = color;
  }
</script>
<script id="fs" type="x-shader/x-fragment">
  precision mediump float;
  varying vec4 vColor;
  void main(){
    gl_FragColor = vColor;
  }
</script>
</head>
<body>
  <p>右のURLをスマートフォンで開いてください http://dry-falls-25691.herokuapp.com/send/<%= @channel %></p>
  <button onClick="clicked()">ANGLE RESET</button>
  <canvas id="canvas"></canvas>
</body>
<script>
var c;
var d_motion;
var interval;
var z = 20.0;
var q = new qtnIV();
var qt_a = q.identity(q.create());
var qt_b = q.identity(q.create());
var qt_g = q.identity(q.create());
var qt = q.identity(q.create());
var alpha = 0,
    beta = 0,
    gamma = 0;
var d_motion;
var device;
var aig;
var acc;

function clicked(){
  alpha = 0;
  beta = 0;
  gamma = 0;
}


window.onload = function(){
  var getDevice = (function(){
    var ua = navigator.userAgent;
    if(ua.indexOf('iPhone') <= 0 && ua.indexOf('iPod') <= 0 && ua.indexOf('Android') <= 0 || ua.indexOf('Mobile') <= 0){
      var dispatcher = new WebSocketRails("evening-stream-72370.herokuapp.com/websocket");
      var channel = dispatcher.subscribe("<%= @channel %>");
      console.log(channel);

      c = document.getElementById('canvas');
      var gl = c.getContext('webgl');
      if(!gl){
        alert('webgl not supported!');
        return;
      }
      gl.clearColor(0.0, 0.0, 0.0, 1.0);
      gl.clearDepth(1.0);
      gl.enable(gl.BLEND);
      gl.blendFuncSeparate(gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE);

      var vertexSource = document.getElementById('vs').textContent,
          fragmentSource = document.getElementById('fs').textContent,
          programs = shaderProgram(vertexSource, fragmentSource);
      var attLocation = [];
      attLocation[0] = gl.getAttribLocation(programs, 'position');
      attLocation[1] = gl.getAttribLocation(programs, 'color');
      var attStride = [];
      attStride[0] = 3;
      attStride[1] = 4;

      var cubeSide = 10;
      var cubeData = cubeLattice(cubeSide, [0.3, 1.0, 1.0, 0.3], 6),
          vPositionBuffer = generateVBO(cubeData.p),
          vColorBuffer = generateVBO(cubeData.c),
          boxVboList = [vPositionBuffer, vColorBuffer],
          boxIndexBuffer = generateIBO(cubeData.i);

      var junior_cube = cube(2, [0.2 ,0.2, 0.4, 0.5]),
          j_position_bugger = generateVBO(junior_cube.p),
          j_color_buffer = generateVBO(junior_cube.c),
          j_vbo_list = [j_position_bugger, j_color_buffer],
          j_index_buffer = generateIBO(junior_cube.i);


      var uniLocation = [];
      uniLocation.mvpMatrix = gl.getUniformLocation(programs, 'mvpMatrix');

      var m = new matIV();
      var mMatrix = m.identity(m.create());
      var vMatrix = m.identity(m.create());
      var pMatrix = m.identity(m.create());
      var vpMatrix = m.identity(m.create());
      var mvpMatrix = m.identity(m.create());
      var qMatrix = m.identity(m.create());

      var cameraPosition = [0.0, 0.0, z],
          centerPoint = [0.0, 0.0, 0.0],
          cameraUp = [0.0, 1.0, 0.0];

      var fovy = 45;
      var near = 0.5;
      var far = 100.0;

      var count = 0,
          cameraX = 0,
          cameraY = 0,
          cameraZ = 0;

      var trans = [],
          ran,
          vel_num = [],
          box_num = 10;

      for(var i = 0; i < box_num; i++){
        trans[i] = [0, 0, 0];
        ran = Math.random() * 6 - 3;
        vel_num[i] = (ran + ran / Math.abs(ran))>>0;
      }

      render();

      function render(){
        c.height = window.innerHeight;
        c.width = window.innerWidth;
        gl.viewport(0.0, 0.0, c.width, c.height);
        var aspect = c.width / c.height;
        var radians = (count % 360) * Math.PI / 180;
        m.perspective(fovy, aspect, near, far, pMatrix);
        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);
        m.lookAt(cameraPosition, centerPoint, cameraUp, vMatrix);
        m.multiply(pMatrix, vMatrix, vpMatrix);

        setAttribute(boxVboList, attLocation, attStride, boxIndexBuffer);

        m.identity(mMatrix);
        q.rotate(alpha, [1.0, 0.0, 0.0], qt_a);
        q.rotate(beta, [0.0, 0.0, 1.0], qt_b);
        q.rotate(gamma, [0.0, 1.0, 0.0], qt_g);
        q.multiply(qt_a, qt_b, qt);
        q.multiply(qt, qt_g, qt);
        q.toMatIV(qt, qMatrix);
        m.multiply(mMatrix, qMatrix, mMatrix);
        m.multiply(vpMatrix, mMatrix, mvpMatrix);

        gl.uniformMatrix4fv(uniLocation.mvpMatrix, false, mvpMatrix);

        gl.drawElements(gl.LINES, cubeData.i.length, gl.UNSIGNED_SHORT, 0);

        setAttribute(j_vbo_list, attLocation, attStride, j_index_buffer);

        for(var i = 0; i < box_num; i++){
          if(count % 50 == 0){
            for (var g = 0; g < 3; g++) {
              trans[i][g] = Math.round(trans[i][g]);
            };
            ran = Math.random() * 6 - 3;
            num = (ran + ran / Math.abs(ran))>>0;
            if(Math.abs(trans[i][Math.abs(num) - 1] + 2.0 * num / Math.abs(num)) <= 4){
              vel_num[i] = num;
            }else{
              vel_num[i] = 0.0;
            }
          }

          if(vel_num[i] != 0.0){
            trans[i][Math.abs(vel_num[i]) - 1] += vel_num[i] / Math.abs(vel_num[i]) * 0.04;
          };

          if(Math.floor(count % 25) != Math.floor(Math.random() * 10)) {
            m.identity(mMatrix);
            m.multiply(mMatrix, qMatrix, mMatrix);
            m.translate(mMatrix, trans[i], mMatrix);
            m.multiply(vpMatrix, mMatrix, mvpMatrix);
            gl.uniformMatrix4fv(uniLocation.mvpMatrix, false, mvpMatrix);
            gl.drawElements(gl.TRIANGLES, junior_cube.i.length, gl.UNSIGNED_SHORT, 0);
          };
        }

        gl.flush();
        requestAnimationFrame(render);

        count++;
      };

      channel.bind("send", function(data) {
        console.log(data.aig);
        console.log(data.acc);
        if (data.d){
          var inter = data.i,
              rotation_rate = data.d;
          alpha += data.d.alpha * inter * Math.PI / 180 * -1;
          beta += data.d.beta * inter * Math.PI / 180;
          gamma += data.d.gamma * inter * Math.PI / 180 * -1;
        };
      });

      function shaderProgram(vertexSource, fragmentSource){
        var vertexShader = gl.createShader(gl.VERTEX_SHADER);
        var fragmentShader = gl.createShader(gl.FRAGMENT_SHADER);
        gl.shaderSource(vertexShader, vertexSource);
        gl.compileShader(vertexShader);
        if(!gl.getShaderParameter(vertexShader, gl.COMPILE_STATUS)){
          alert(gl.getShaderInfoLog(vertexShader) + "in vertexShader");
          return null;
        }
        gl.shaderSource(fragmentShader, fragmentSource);
        gl.compileShader(fragmentShader);
        if(!gl.getShaderParameter(fragmentShader, gl.COMPILE_STATUS)){
          alert(gl.getShaderInfoLog(fragmentShader) + "in fragmentShader");
          return null;
        }
        var program = gl.createProgram();
        gl.attachShader(program, vertexShader);
        gl.attachShader(program, fragmentShader);
        gl.linkProgram(program);
        if(!gl.getProgramParameter(program, gl.LINK_STATUS)){
          alert(gl.getProgramInfoLog(program));
          return null;
        }
        gl.useProgram(program);
        return program;
      }

      function generateVBO(data){
        var vbo = gl.createBuffer();
        gl.bindBuffer(gl.ARRAY_BUFFER, vbo);
        gl.bufferData(gl.ARRAY_BUFFER, new Float32Array(data), gl.STATIC_DRAW);
        gl.bindBuffer(gl.ARRAY_BUFFER, null);
        return vbo;
      }

      function generateIBO(data){
        var ibo = gl.createBuffer();
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);
        gl.bufferData(gl.ELEMENT_ARRAY_BUFFER, new Int16Array(data), gl.STATIC_DRAW);
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, null);
        return ibo;
      }

      function setAttribute(vbo, attL, attS, ibo){
        for(var i in vbo){
          gl.bindBuffer(gl.ARRAY_BUFFER, vbo[i]);
          gl.enableVertexAttribArray(attL[i]);
          gl.vertexAttribPointer(attL[i], attS[i], gl.FLOAT, false, 0, 0);
        }
        gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, ibo);
      }
    }else{
      alert("This devise is not supported")
    }
  })();
};


</script>